from typing import Literal

from openai.types.chat import ChatCompletionMessageToolCall
from pydantic import BaseModel


class Message(BaseModel):
    content: str | dict | None = None
    """The contents of the message."""

    role: Literal["user", "assistant", "system", "tool", "model"] = "user"
    """The role of the author of this message."""

    tool_calls: list[ChatCompletionMessageToolCall] | None = None
    """The tool calls generated by the model, such as function calls."""

    tool_call_id: str | None = None
    """The ID of the tool call generated by the model."""


class ToolCall(BaseModel):
    id: str | None = None
    """The ID of the tool call."""

    function: str
    """The name of the function called."""

    kwargs: dict
    """The keyword arguments passed to the function."""


class Usage(BaseModel):
    completion_tokens: int = 0
    """The number of tokens used for completion."""
    prompt_tokens: int = 0
    """The number of tokens used for the prompt."""

    total_tokens: int = 0
    """The total number of tokens used."""

    def __add__(self, other: "Usage"):
        return Usage(
            completion_tokens=self.completion_tokens + other.completion_tokens,
            prompt_tokens=self.prompt_tokens + other.prompt_tokens,
            total_tokens=self.total_tokens + other.total_tokens,
        )
